// Code generated by vfsgen; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 4, 29, 21, 34, 1, 368054528, time.UTC),
		},
		"/favicon.ico": &vfsgen۰CompressedFileInfo{
			name:             "favicon.ico",
			modTime:          time.Date(2018, 4, 29, 21, 34, 1, 368368464, time.UTC),
			uncompressedSize: 3758,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xc9\x6a\x2a\x41\x14\xad\x4c\x64\x90\x0c\xbc\xc5\x23\x0b\x03\x1d\x92\x90\x97\x01\xd7\xef\x03\x74\xab\xb8\xf4\x13\x14\x67\x04\x71\xa9\x1f\xa0\x0b\x37\xfa\x05\xe2\xfc\x1d\xba\x55\x71\x27\xe2\x42\x57\x8a\xc3\xca\x01\xeb\x71\x2a\xb4\x74\x97\xdd\x6d\x3b\x24\xab\x77\xe0\x12\xa8\x9b\x73\x4e\x59\xb7\xee\xed\x22\xe4\x88\x1c\x11\xc1\x88\xbf\x02\x49\xdd\x10\xf2\x9b\x10\xf2\x87\x10\x22\x10\x42\xfe\x92\xaf\x75\x86\x1b\x42\x7e\x19\xbe\x42\x44\xb9\x5c\xa6\xf7\xf7\xf7\xf4\xf9\xf9\x99\x56\xab\x55\xca\x43\x9a\xaf\x54\x2a\x9a\x79\x25\xfe\x26\x80\x4b\x08\x61\xf1\xfa\xfa\x4a\xa7\xd3\xe9\x41\xf3\x9b\xf0\xf4\xf4\xb4\xe2\x23\xd2\xe9\xb4\x2c\xff\xf2\xf2\x22\xcb\xa7\x52\xa9\xad\xf8\x9b\x80\x33\xc3\xbe\x45\xfe\xe3\xe3\x23\x9d\xcf\xe7\xaa\x79\x41\x10\x34\xf3\x3c\x5f\x0f\x70\x66\xd8\x37\xb4\xa1\x91\xcd\x66\x15\xf3\xd0\xd6\xca\xab\xf1\xf5\x02\xfb\xce\xe5\x72\xd4\xef\xf7\x6b\xe6\x03\x81\xc0\x4e\xfc\xff\xd8\x8c\x46\xa3\xc1\xce\xf7\xf3\xf3\x93\x5e\x5f\x5f\xcb\xee\xf6\x2e\x01\x0d\x68\x41\x13\xda\x6a\xc0\x1d\x72\xbb\xdd\xf4\xe4\xe4\x64\x6f\x4f\xb5\x38\x3d\x3d\xa5\x3e\x9f\x8f\xce\x66\xb3\x35\x6f\x8b\xc5\xf2\x6d\xbe\x7c\xc0\x4b\x3a\xa7\xf0\xbb\x7f\xca\x5b\x0c\x9c\x03\x50\xaf\xd7\xd7\xce\xfc\xe1\xe1\x81\xf5\xd1\x68\x34\xda\xfb\x3e\x0d\x87\x43\x5a\x28\x14\xd8\xf7\x81\xaf\x05\xee\x03\xf6\x21\x5d\xc7\x2c\x1b\x0c\x06\x7b\xfb\xf2\x80\x26\xbf\x87\x60\x30\x48\x3f\x3e\x3e\x64\x6b\xa5\x52\xe9\xe0\xde\x22\x70\x0e\x52\x2f\xa5\x1e\x9b\x4c\x26\xdf\xe6\x8f\x7a\xf2\xbd\xc9\xfb\x6f\x5b\xf3\xdb\xdb\x5b\xdd\xfb\x57\xf2\xe7\xcf\x3f\x93\xc9\xc8\x38\x89\x44\x82\x26\x93\x49\xda\xef\xf7\x15\x35\x4d\x26\x93\x8c\x9f\xcf\xe7\x55\xfd\x71\xa7\xf9\xf3\xf7\x7a\xbd\xb2\x35\xa3\xd1\x48\xdb\xed\xf6\x8a\xf3\xfe\xfe\xce\xd6\xcf\xcf\xcf\xa9\xcd\x66\xa3\xdd\x6e\x57\xa6\x19\x0a\x85\xd6\x7a\x47\x69\xaf\x58\x83\xb6\xf4\x7f\x31\x13\x6b\xb5\x1a\x3d\x3e\x3e\x96\xad\xdf\xdd\xdd\xb1\xdf\x8d\xfe\xb8\xba\xba\x92\xe5\x7a\xbd\x9e\x4c\xb7\xd9\x6c\x2a\xf6\x2f\xee\xda\x78\x3c\x66\x51\x2c\x16\xd7\xde\x31\xe0\xa0\xf7\x01\xa7\xd3\xa9\x7b\x6e\x28\xd5\x37\x1c\x0e\x6f\x3d\x7f\x3c\x1e\xcf\x8a\x8f\x59\x68\x36\x9b\x75\xf1\x94\xea\x0b\xbe\xdd\x6e\xd7\xed\xcd\xcf\x5f\x51\xc3\xe5\x72\xad\xd5\x82\x0f\xb5\xfa\xa2\x2e\x97\x97\x97\x9a\x5c\x68\x63\xd6\x6b\xbd\x51\x71\x1f\x30\x13\xd1\x17\x06\x83\x81\x05\xbf\x27\x69\x7d\x31\x5f\xf1\xde\xe2\xdf\xa1\x67\x67\x67\x2b\x3e\xb4\xa0\xa9\xf5\xfd\xd5\x42\x34\x1a\xdd\xba\xbe\xf1\x78\x7c\x27\x2f\x25\x2c\x16\x0b\x6a\xb5\x5a\x75\x7b\x3b\x1c\x0e\xba\x5c\x2e\x0f\xe6\x2f\xee\x21\x12\x89\x68\xbe\x4f\xf0\x4d\x8b\xc5\x62\x07\xf7\x96\xa2\xd5\x6a\xb1\xb9\x81\xef\xe4\xc5\xc5\x05\x8b\xb7\xb7\x37\xd6\x83\x9d\x4e\x67\x6b\x3d\xf2\xc3\xf8\x17\x00\x00\xff\xff\xd3\xb4\x05\xa9\xae\x0e\x00\x00"),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2018, 4, 29, 21, 33, 26, 715269804, time.UTC),
			uncompressedSize: 117,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x4c\xc9\x4f\x2e\xa9\x2c\x48\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x51\xa9\x89\x29\x76\x5c\x36\x25\x99\x25\x39\xa9\x76\xb9\x95\x0a\x05\x89\xc9\xd9\x89\xe9\xa9\x29\x0a\x05\x89\xe9\xa9\x36\xfa\x10\x71\x2e\x1b\x7d\xa8\xba\xa4\xfc\x94\x4a\x90\x2e\x23\xbb\x92\xd4\xe2\x12\x05\x38\x61\xa3\x9f\x61\x04\x52\x06\x95\xd7\x87\x98\x0e\x08\x00\x00\xff\xff\x7b\x65\xca\xe4\x75\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/favicon.ico"].(os.FileInfo),
		fs["/index.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
