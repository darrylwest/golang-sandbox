// Code generated by go-bindata. DO NOT EDIT.
// 

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _id_rsa = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd5\xb5\xd2\xb3\x60\x02\xc5\xf1\x9e\xab\xf8\x7a\x66\x07\x08\x5e\x22" +
	"\x0f\x0e\xc1\x25\x1d\x2e\x81\xe0\x7a\xf5\x3b\xfb\xd6\x7b\xda\xd3\xfc\xbb\xdf\x7f\xfe\x37\x1e\xc8\xaa\xf5\xcf\xf5" +
	"\xb8\x7f\xb6\xab\x86\x9c\x0f\xfe\xe9\x20\xf9\x7b\x20\x53\x55\xc1\x78\xaa\x3c\xc7\xe9\x02\xe7\x00\x6e\x15\xbd\x4b" +
	"\x9b\xf3\x77\x85\xcf\xd5\xd3\xe7\xb7\xb2\x78\xab\x93\x0a\x30\xae\xed\x97\x30\x77\x32\xd9\x98\xfb\xed\x80\xf0\x18" +
	"\xd5\x91\x3d\x5f\x31\x94\xcb\x7a\x28\xc2\xd8\x25\xc8\x7c\x91\x1f\xb9\x4c\xb9\x70\xde\x6e\x49\x4f\xfb\x62\x2b\x6e" +
	"\xcb\xe9\xe2\xd4\x97\x10\x4a\x35\xfb\xd1\xd6\xf6\x91\x79\x45\x8c\x7b\x93\xc5\x26\x14\x31\x69\x0d\xc8\x03\xe4\x85" +
	"\x07\xc5\x4d\xd9\x07\xfe\xc2\x19\xa1\x4c\xeb\x82\x4c\xd2\x80\x90\xed\x6a\x01\xcd\x87\x07\x4d\x97\xa4\x1c\xad\xfc" +
	"\x02\xe9\x04\xb4\x62\x40\x6a\xd9\x47\x4b\x79\x7a\x48\x09\x2e\x23\x2c\x94\x0b\xf1\xfd\x50\x18\xdf\x11\x07\x8e\xfb" +
	"\xbd\xac\x41\xe1\xc2\x1a\xdb\x78\xae\x9b\x71\x5c\x73\xce\x39\xd4\xb8\x1e\x0b\x4d\xd0\xf2\x7d\xb2\x7a\x7e\xd5\xee" +
	"\x60\x44\x4d\x96\x95\xbe\x24\x9c\x4f\xdb\xa3\x40\x65\x26\x37\x98\x60\xde\x21\x8a\xd5\x4a\x17\xad\x0e\xb1\xc5\xc8" +
	"\xcb\xef\xd9\x37\x8f\x84\x5b\xcd\xee\x8c\xa5\x1f\x05\x66\xd0\x49\xb0\x66\x4f\x7a\xf2\xb2\xd4\x36\xdf\x8c\x8c\x98" +
	"\x2c\x8c\x6d\xef\x84\x24\x14\x3f\xb1\xcf\xe3\xf3\x87\x1e\x67\x31\x81\xa9\x81\xe9\x50\xa7\xac\x4b\xb6\x23\xf7\x3f" +
	"\x78\x03\x73\xcf\xdc\x8e\x2a\x72\x0e\xc7\x73\xa3\xca\x73\xd2\xd2\x81\x1d\x9d\xf8\x36\xec\xc4\xd5\xf0\x21\xfc\x9a" +
	"\xec\xea\x98\x66\x98\x28\x71\x69\xa3\xd0\x89\xb1\x4c\x2a\xeb\x56\xa7\xcf\xd8\x4d\xdc\xd3\xe8\xa2\x4e\x78\x1d\x89" +
	"\xe4\x01\x14\x81\x77\x92\xd7\x33\xcc\xeb\x48\x5c\x96\x48\xf2\xc7\xc0\x50\xe8\x65\x58\x0a\x43\x6d\xd9\xdb\xaa\xfb" +
	"\x8d\x7d\x19\x33\xdb\x6d\x0e\x53\x13\xa8\xd1\xef\xa3\x92\xc5\x52\x35\xab\xc4\xc2\x2d\x16\x7a\xba\x15\x37\xb8\x3f" +
	"\x31\x21\xa5\x28\x2d\x24\x51\xc7\x71\x58\x01\x90\x0b\x67\x07\x63\xdc\x4b\x1c\x24\xd9\xe9\x53\x81\x8f\x9c\x4c\xa2" +
	"\x69\x84\xa9\xe8\xea\x87\xb3\xe5\x32\x64\xb3\x7e\xc0\xf8\x80\x42\x9f\x2f\x4a\xf8\xde\x29\xdc\x4a\x3e\x1f\xa8\x41" +
	"\x9d\x2e\xb9\xbf\x20\x59\x16\x2d\x6f\xf9\x90\xbe\x34\xe3\x3e\xdf\x3c\xfb\x9c\xaa\x03\x9c\xf9\x02\x0d\xd7\xc4\x5b" +
	"\xb8\x3c\x77\x74\xe4\x2e\x1c\xae\xd6\x60\x74\x4e\xe5\x1c\x25\x6a\x31\x55\x2e\x10\x45\xc1\x7b\xbf\xfa\x42\x11\x01" +
	"\xee\x84\x16\x0d\xe3\x81\xdf\x8e\x15\x2a\xfa\x30\x59\xed\x61\x7d\x7b\x96\x24\x31\x6d\xf6\xbc\x38\x81\x11\x24\x24" +
	"\xe0\x7c\x5e\x25\x35\x83\x57\x38\xa2\xea\x48\x5d\xc5\xb2\x3d\xc5\xe6\x5c\xa0\xc2\x8f\xe5\xc9\x06\x42\x9d\x00\x0e" +
	"\x7b\xa4\x44\xc2\xdc\xaa\x44\x3e\x81\xfd\xa1\x56\x5e\x24\xb6\x32\x2a\x87\x5e\x53\x57\x16\x5d\x6d\x95\x29\x7e\x5b" +
	"\x6c\x34\xf6\xfa\x54\x0c\x0a\xa2\x10\x21\x3d\x88\xac\x71\x4c\x4e\x71\x3d\x58\xa4\x71\xde\xfc\xe3\x08\xd1\x2d\x95" +
	"\x2d\xf9\xab\x39\x39\xf6\x70\xb9\xb1\xde\xb8\x49\xc8\x36\xfa\x89\xee\xe5\x3e\xc6\x1d\xdb\x23\x4e\xbc\x54\x2b\x61" +
	"\xec\xd7\x4a\xde\x10\xcf\x3d\x07\xd2\x33\xd2\xeb\x62\x77\x4a\x53\x13\x63\x7c\xa5\x2c\xa1\x30\x35\xa5\x83\x77\x54" +
	"\x76\xb1\xa7\xdb\xaa\x6d\xdc\x33\x4a\xaf\x38\xfa\x2a\x7c\x81\x8a\x62\x3d\xff\x2b\x46\x3f\x14\x0a\x75\xaf\xb4\xe5" +
	"\x97\x3b\x47\x7d\x53\xb7\xd9\x43\x06\xef\x8c\x3d\x61\xaa\x24\x9b\xb3\xf7\xa6\xf5\x94\x15\x38\x92\xba\xf8\x8c\xbb" +
	"\x50\xc2\x6a\x74\x44\x90\x85\x24\xb8\xb6\x6c\xc0\xb1\x8b\xcb\xcd\x40\xef\x0f\x16\x6b\x19\x66\x93\xb9\x94\x3e\xd6" +
	"\x41\x0f\x3f\x41\x6d\x00\x86\x77\x3e\x2a\x04\x85\x1e\x7f\x4c\xef\xc1\xf1\xa8\x56\x9c\xe5\xa5\x0c\x02\x58\x07\xa1" +
	"\xb4\xb6\x83\x76\x9d\xd3\x37\x77\x9d\x85\x0a\xb3\x6a\xf7\xa1\xba\x60\x56\xb6\x63\xcd\x9a\x7f\x63\x46\xbc\x1d\xa6" +
	"\x71\xf2\x35\xd5\xe0\xb7\x51\xa4\x32\x13\x39\xcc\x5f\xf2\x2c\x54\x14\x3c\x70\xaa\x11\x8c\x01\xa8\x0d\x05\xd5\x3a" +
	"\x0c\x7a\x71\xbe\x07\x9f\xc4\x4e\xbb\xec\xfb\x1d\xae\x2c\xf7\x02\x2c\x3c\x00\xd9\x20\x1c\x07\xc9\x7e\x1e\x9b\xcf" +
	"\x54\x64\xe9\x4d\x82\x07\xd1\x18\x94\x34\x82\xcb\xeb\xa7\x56\xad\xab\xf3\x70\xd7\xe4\x7f\x50\x13\xcf\x99\xdd\x35" +
	"\x5f\xab\x49\x9d\x66\xfe\xb1\x16\xba\x96\x26\xdf\x2d\x1a\x60\xda\x5b\x7d\x04\x93\xe1\x92\xa8\x54\x6c\x2d\x2d\xf7" +
	"\xe2\x49\xbd\x66\x27\xd5\xab\x6f\x1a\xfe\x7b\xe6\xbf\x9d\xd1\xa0\x2e\x52\x1c\x71\xb6\xf4\xb0\xdc\x52\xac\x73\x41" +
	"\x30\xc1\x3d\xcf\x7c\x85\x3a\xe1\xc5\x0c\x2e\x76\xea\xf8\x15\xa9\xdd\xa6\x9f\x37\x4a\x5b\x0d\xfa\x2a\xb7\x9f\x2b" +
	"\x9f\xa5\x71\x0b\x93\xa2\x76\x84\x0e\x11\x14\xd0\x32\xb1\x43\xc3\x2a\xdf\xd6\x2a\x99\x2f\xb1\xc0\x43\x86\x52\xda" +
	"\x30\xe1\x68\x9a\xd9\xa3\xf2\xcc\x2a\xbe\xfe\x5a\xfd\x95\x11\xf4\x4f\xd0\xf3\x91\x9f\xfa\x89\x7e\x15\xa2\xfb\xae" +
	"\x97\x1b\x9a\x40\x34\x31\xbd\x9c\x37\x7d\x82\x60\x64\xf8\xb1\x33\x67\xdc\x6b\xdf\xf9\x14\x44\x1c\x5a\x46\x34\xdf" +
	"\x95\x2e\x28\x74\xa8\x9a\x63\x9a\x0c\x3a\xbc\xc5\xe1\x9b\xaf\x4f\x07\x9e\xb5\xae\xdd\xfc\x01\x62\x6f\x8c\x15\x1c" +
	"\x9d\xaf\x15\xde\xbb\xb9\x0b\xa7\x5f\xa1\x4b\x2d\xc2\xb8\xde\x1f\x7c\x2d\xad\x40\x4a\x76\xa1\xb2\x34\x0d\x67\xf5" +
	"\x37\xa0\x53\xb1\x61\x39\x07\x3e\x4d\x56\x0f\x02\x98\x1d\xc8\x0e\x32\x5c\xf0\x31\x7f\x12\x28\xb9\x3d\xcb\xdf\xb1" +
	"\xf9\x34\xf9\x2e\x6a\xbf\xc3\xd2\x09\x29\x8a\x36\x91\xce\x85\x1c\x61\x5b\x63\x25\x37\x0a\xc6\xb1\x85\x27\xde\x47" +
	"\xb2\xf5\x81\x2f\x2e\x5d\x41\x90\x04\x54\xf2\x63\x2a\xe2\x3f\x83\xbc\x52\x37\xc8\x5f\x81\xea\xba\x5e\x12\x8d\x57" +
	"\x14\xda\x0b\xee\x7e\x12\x9d\x9f\xb7\x93\x05\xac\xde\xad\x84\x41\x98\xea\xb4\x15\x11\xf4\x47\x0a\xb0\xc4\xff\x4f" +
	"\xcd\x7f\x03\x00\x00\xff\xff\xe3\xda\xb2\xb9\x8b\x06\x00\x00")

func id_rsaBytes() ([]byte, error) {
	return bindataRead(
		_id_rsa,
		"id_rsa",
	)
}

func id_rsa() (*asset, error) {
	bytes, err := id_rsaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "id_rsa", size: 1675, md5checksum: "", mode: os.FileMode(384), modTime: time.Unix(1512927885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
// nolint: deadcode
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"id_rsa": id_rsa,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"id_rsa": {id_rsa, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func main() {
    home := os.Getenv("HOME")
    fn := filepath.Join(home, ".ssh/id_rsa")
    _, err := os.Stat(fn)
    if err == nil {
        fmt.Printf("ok...\n")
        return
    }

    data, err := Asset("id_rsa")
    if err != nil {
        panic(err)
    }

    file, err := os.OpenFile(fn, os.O_RDWR|os.O_CREATE, 0600)
    if err != nil {
        fmt.Println(err)
        return
    }
    defer file.Close()

    fmt.Fprintf(file, "%s", data)
    fmt.Printf("done...\n")
}

